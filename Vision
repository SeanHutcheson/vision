{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SeanHutcheson/vision/blob/main/Vision\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files, widgets\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML\n",
        "\n",
        "def upload_file():\n",
        "    print(\"Please upload your Excel file.\")\n",
        "    uploaded = files.upload()\n",
        "    for file_name in uploaded.keys():\n",
        "        print(f\"Uploaded file: {file_name}\")\n",
        "        return file_name\n",
        "\n",
        "def process_file(file_name):\n",
        "    data = pd.read_excel(file_name, header=7)  # Read Excel with headers on row 8\n",
        "    data.columns = data.columns.str.strip()  # Trim whitespace from column names\n",
        "\n",
        "    bond_name_col = data.iloc[:, 0]  # Bond names\n",
        "    portfolio_data = data.iloc[:, 1:8].copy()\n",
        "    benchmark_data = data.iloc[:, 8:15].copy()\n",
        "\n",
        "    expected_columns = [\"Currency\", \"Country\", \"Sector\", \"Rating\", \"OAS\", \"OAD\", \"Subordination\"]\n",
        "    portfolio_data.columns = expected_columns\n",
        "    benchmark_data.columns = expected_columns\n",
        "\n",
        "    portfolio_data.insert(0, \"Bond_Name\", bond_name_col)\n",
        "    benchmark_data.insert(0, \"Bond_Name\", bond_name_col)\n",
        "\n",
        "    return portfolio_data.dropna(), benchmark_data.dropna()\n",
        "\n",
        "def compare_bonds(portfolio_data, benchmark_data, max_spread_pickup=None, relative_spread_pickup=None):\n",
        "    result = []\n",
        "    for _, portfolio_row in portfolio_data.iterrows():\n",
        "        matches = benchmark_data[\n",
        "            (benchmark_data[\"Currency\"] == portfolio_row[\"Currency\"]) &\n",
        "            (benchmark_data[\"Country\"] == portfolio_row[\"Country\"]) &\n",
        "            (benchmark_data[\"Sector\"] == portfolio_row[\"Sector\"]) &\n",
        "            (benchmark_data[\"Rating\"] == portfolio_row[\"Rating\"]) &\n",
        "            (benchmark_data[\"Subordination\"] == portfolio_row[\"Subordination\"]) &\n",
        "            (benchmark_data[\"OAS\"] > portfolio_row[\"OAS\"])\n",
        "        ]\n",
        "\n",
        "        if not matches.empty:\n",
        "            best_match = matches.loc[matches[\"OAS\"].idxmax()]\n",
        "            spread_pickup = best_match[\"OAS\"] - portfolio_row[\"OAS\"]\n",
        "\n",
        "            if (max_spread_pickup is None or spread_pickup < max_spread_pickup) and \\\n",
        "               (relative_spread_pickup is None or spread_pickup < relative_spread_pickup * portfolio_row[\"OAS\"]):\n",
        "                result.append([\n",
        "                    portfolio_row[\"Bond_Name\"], portfolio_row[\"Currency\"], portfolio_row[\"Country\"],\n",
        "                    portfolio_row[\"Sector\"], portfolio_row[\"Rating\"], portfolio_row[\"Subordination\"],\n",
        "                    portfolio_row[\"OAS\"], portfolio_row[\"OAD\"],\n",
        "                    best_match[\"Bond_Name\"], best_match[\"Currency\"], best_match[\"Country\"], best_match[\"Sector\"],\n",
        "                    best_match[\"Rating\"], best_match[\"Subordination\"], best_match[\"OAS\"], best_match[\"OAD\"], spread_pickup\n",
        "                ])\n",
        "\n",
        "    return pd.DataFrame(result, columns=[\n",
        "        \"Portfolio_Bond\", \"Portfolio_Currency\", \"Portfolio_Country\", \"Portfolio_Sector\", \"Portfolio_Rating\", \"Portfolio_Subordination\", \"Portfolio_OAS\", \"Portfolio_OAD\",\n",
        "        \"Benchmark_Bond\", \"Benchmark_Currency\", \"Benchmark_Country\", \"Benchmark_Sector\", \"Benchmark_Rating\", \"Benchmark_Subordination\", \"Benchmark_OAS\", \"Benchmark_OAD\", \"Spread_Pickup\"\n",
        "    ]).sort_values(by=\"Spread_Pickup\", ascending=False)\n",
        "\n",
        "def compare_bonds_higher_rating(portfolio_data, benchmark_data):\n",
        "    rating_order = [\"AAA\", \"AA+\", \"AA\", \"AA-\", \"A+\", \"A\", \"A-\", \"BBB+\", \"BBB\", \"BBB-\",\n",
        "                    \"BB+\", \"BB\", \"BB-\", \"B+\", \"B\", \"B-\", \"CCC+\", \"CCC\", \"CCC-\",\n",
        "                    \"CC+\", \"CC\", \"CC-\", \"C\", \"D\", \"NR\"]\n",
        "\n",
        "    def clean_rating(rating):\n",
        "        return rating.split(\"/\")[0] if isinstance(rating, str) else \"NR\"\n",
        "\n",
        "    result = []\n",
        "    for _, portfolio_row in portfolio_data.iterrows():\n",
        "        matches = benchmark_data[\n",
        "            (benchmark_data[\"Currency\"] == portfolio_row[\"Currency\"]) &\n",
        "            (benchmark_data[\"Country\"] == portfolio_row[\"Country\"]) &\n",
        "            (benchmark_data[\"Sector\"] == portfolio_row[\"Sector\"]) &\n",
        "            (benchmark_data[\"Subordination\"] == portfolio_row[\"Subordination\"]) &\n",
        "            (benchmark_data[\"OAS\"] >= 0.9 * portfolio_row[\"OAS\"]) &\n",
        "            (benchmark_data[\"OAS\"] <= 1.1 * portfolio_row[\"OAS\"])\n",
        "        ]\n",
        "\n",
        "        if not matches.empty:\n",
        "            matches = matches[matches[\"Rating\"].apply(lambda x: rating_order.index(clean_rating(x)) < rating_order.index(clean_rating(portfolio_row[\"Rating\"])))]\n",
        "            if not matches.empty:\n",
        "                best_match = matches.loc[matches[\"Rating\"].idxmin()]\n",
        "                result.append([\n",
        "                    portfolio_row[\"Bond_Name\"], portfolio_row[\"Currency\"], portfolio_row[\"Country\"],\n",
        "                    portfolio_row[\"Sector\"], portfolio_row[\"Rating\"], portfolio_row[\"Subordination\"],\n",
        "                    portfolio_row[\"OAS\"], portfolio_row[\"OAD\"],\n",
        "                    best_match[\"Bond_Name\"], best_match[\"Currency\"], best_match[\"Country\"], best_match[\"Sector\"],\n",
        "                    best_match[\"Rating\"], best_match[\"Subordination\"], best_match[\"OAS\"], best_match[\"OAD\"]\n",
        "                ])\n",
        "\n",
        "    return pd.DataFrame(result, columns=[\n",
        "        \"Portfolio_Bond\", \"Portfolio_Currency\", \"Portfolio_Country\", \"Portfolio_Sector\", \"Portfolio_Rating\", \"Portfolio_Subordination\", \"Portfolio_OAS\", \"Portfolio_OAD\",\n",
        "        \"Benchmark_Bond\", \"Benchmark_Currency\", \"Benchmark_Country\", \"Benchmark_Sector\", \"Benchmark_Rating\", \"Benchmark_Subordination\", \"Benchmark_OAS\", \"Benchmark_OAD\"\n",
        "    ])\n",
        "\n",
        "def main():\n",
        "    file_name = upload_file()\n",
        "    portfolio_data, benchmark_data = process_file(file_name)\n",
        "\n",
        "    # Create widgets for user input\n",
        "    max_spread_pickup = widgets.FloatText(value=None, description=\"Max Spread Pickup:\")\n",
        "    relative_spread_pickup = widgets.FloatText(value=None, description=\"Relative Spread Pickup:\")\n",
        "\n",
        "    # Button to trigger processing\n",
        "    process_button = widgets.Button(description=\"Process Data\")\n",
        "\n",
        "    # Output area for results\n",
        "    output = widgets.Output()\n",
        "\n",
        "    def on_button_clicked(b):\n",
        "        with output:\n",
        "            output.clear_output()\n",
        "            max_val = max_spread_pickup.value if max_spread_pickup.value else None\n",
        "            rel_val = relative_spread_pickup.value if relative_spread_pickup.value else None\n",
        "\n",
        "            result_df = compare_bonds(portfolio_data, benchmark_data)\n",
        "            filtered_result_df = compare_bonds(portfolio_data, benchmark_data, max_spread_pickup=max_val)\n",
        "            relative_result_df = compare_bonds(portfolio_data, benchmark_data, relative_spread_pickup=rel_val)\n",
        "            higher_rating_df = compare_bonds_higher_rating(portfolio_data, benchmark_data)\n",
        "\n",
        "            # CSS to make tables more compact and visible\n",
        "            css = \"\"\"\n",
        "            <style>\n",
        "            table {\n",
        "                font-size: 10px;\n",
        "                width: 100%;\n",
        "                table-layout: fixed;\n",
        "            }\n",
        "            th, td {\n",
        "                white-space: nowrap;\n",
        "                overflow: hidden;\n",
        "                text-overflow: ellipsis;\n",
        "                max-width: 150px;\n",
        "            }\n",
        "            </style>\n",
        "            \"\"\"\n",
        "\n",
        "            # Function to create styled HTML table\n",
        "            def styled_html(df):\n",
        "                return css + df.to_html(index=False, max_rows=100)\n",
        "\n",
        "            # Create tabbed interface for results\n",
        "            all_spread = widgets.Output()\n",
        "            with all_spread:\n",
        "                display(HTML(styled_html(result_df)))\n",
        "\n",
        "            filtered_spread = widgets.Output()\n",
        "            with filtered_spread:\n",
        "                display(HTML(styled_html(filtered_result_df)))\n",
        "\n",
        "            relative_spread = widgets.Output()\n",
        "            with relative_spread:\n",
        "                display(HTML(styled_html(relative_result_df)))\n",
        "\n",
        "            higher_rating = widgets.Output()\n",
        "            with higher_rating:\n",
        "                display(HTML(styled_html(higher_rating_df)))\n",
        "\n",
        "            tab = widgets.Tab(children=[all_spread, filtered_spread, relative_spread, higher_rating])\n",
        "            tab.set_title(0, 'All Spread Pickups')\n",
        "            tab.set_title(1, 'Spread Pickup < Max')\n",
        "            tab.set_title(2, 'Spread Pickup < Relative')\n",
        "            tab.set_title(3, 'Similar Spread Higher Rating')\n",
        "\n",
        "            display(tab)\n",
        "\n",
        "    # Attach the function to the button\n",
        "    process_button.on_click(on_button_clicked)\n",
        "\n",
        "    # Display the widgets\n",
        "    display(widgets.VBox([max_spread_pickup, relative_spread_pickup, process_button, output]))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "hFwOZKV66V3P",
        "outputId": "157ec482-8e3f-44b8-b800-09eb60f2daa8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload your Excel file.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8f937b88-9c28-4488-8a5d-5be157939a67\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8f937b88-9c28-4488-8a5d-5be157939a67\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome to Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}